name: Build, Test and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Extract version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "CLEAN_VERSION=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.CLEAN_VERSION }}
        mvn versions:commit
    
    - name: Run tests
      run: mvn clean test
    
    - name: Build JAR
      run: mvn clean package -DskipTests
    
    - name: Run integration tests (if any)
      run: |
        if [ -f "scripts/test-integration.sh" ]; then
          chmod +x scripts/test-integration.sh
          ./scripts/test-integration.sh
        fi
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: misoto-jar
        path: target/misoto-*.jar
        retention-days: 30
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/
        retention-days: 30

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "CLEAN_VERSION=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: misoto-jar
        path: ./artifacts
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]' | head -2 | tail -1)
        if [ -z "$PREV_TAG" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "## What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        git log --pretty=format:"- %s (%h)" ${PREV_TAG}..${{ steps.version.outputs.VERSION }} >> CHANGELOG.md
        
        # Add contributors
        echo "" >> CHANGELOG.md
        echo "## Contributors" >> CHANGELOG.md
        git log --pretty=format:"- @%an" ${PREV_TAG}..${{ steps.version.outputs.VERSION }} | sort | uniq >> CHANGELOG.md
        
        # Read changelog content
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create comprehensive release notes
      id: release_notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # Misoto CLI ${{ steps.version.outputs.VERSION }}
        
        A Java-based CLI application that ports TypeScript Claude Code functionality to Java using Spring Boot.
        
        ## üì¶ Installation
        
        ### Download and Run
        ```bash
        # Download the JAR
        wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/misoto-${{ steps.version.outputs.CLEAN_VERSION }}.jar
        
        # Run directly
        java -jar misoto-${{ steps.version.outputs.CLEAN_VERSION }}.jar --help
        
        # Or make it executable (Unix/Linux/macOS)
        chmod +x misoto-${{ steps.version.outputs.CLEAN_VERSION }}.jar
        ./misoto-${{ steps.version.outputs.CLEAN_VERSION }}.jar --help
        ```
        
        ### Requirements
        - Java 17 or higher
        - ANTHROPIC_API_KEY environment variable (for Claude AI integration)
        
        ## üöÄ Quick Start
        
        1. Set up your environment:
        ```bash
        export ANTHROPIC_API_KEY=your_api_key_here
        ```
        
        2. Run a command:
        ```bash
        java -jar misoto-${{ steps.version.outputs.CLEAN_VERSION }}.jar provider status
        java -jar misoto-${{ steps.version.outputs.CLEAN_VERSION }}.jar chat
        ```
        
        ## üîß Key Features
        
        - **Multi-module architecture**: Contains 3 main modules (misoto/, mcp-server/, claude-code/)
        - **Agent system**: Autonomous task execution with different operational modes
        - **MCP integration**: Model Context Protocol support with multi-server capabilities  
        - **AI integration**: Claude AI client using Spring AI Anthropic provider
        - **Interactive chat**: Full-featured chat interface with Claude AI
        - **Provider management**: Switch between different AI providers (Anthropic, Ollama)
        
        ## üìã Available Commands
        
        - `chat` - Start interactive chat session with Claude AI
        - `provider status` - Show current AI provider status
        - `provider switch <name>` - Switch between AI providers
        - `provider models` - List available models
        - `mcp` - Manage MCP (Model Context Protocol) configurations
        
        ## üêõ Bug Reports & Feature Requests
        
        Please report issues at: https://github.com/${{ github.repository }}/issues
        
        ---
        
        ${{ steps.changelog.outputs.CHANGELOG }}
        EOF
        
        RELEASE_NOTES_CONTENT=$(cat RELEASE_NOTES.md)
        echo "CONTENT<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "Misoto CLI ${{ steps.version.outputs.VERSION }}"
        body: ${{ steps.release_notes.outputs.CONTENT }}
        files: |
          ./artifacts/misoto-*.jar
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update latest release pointer
      run: |
        # Create or update a 'latest' tag pointing to this release
        git tag -f latest ${{ steps.version.outputs.VERSION }}
        git push origin latest --force